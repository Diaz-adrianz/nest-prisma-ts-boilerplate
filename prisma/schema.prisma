generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth"]
}

model User {
  id                String  @id @default(uuid())
  username          String  @unique
  email             String  @unique
  password          String
  path_photo        String?
  is_email_verified Boolean @default(false)
  is_active         Boolean @default(false)

  is_deleted Boolean    @default(false)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?
  created_by String?
  updated_by String?
  deleted_by String?
  // -------
  userRole   UserRole[]

  @@schema("auth")
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  is_active   Boolean @default(true)

  is_deleted  Boolean       @default(false)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  deleted_at  DateTime?
  created_by  String?
  updated_by  String?
  deleted_by  String?
  // -------
  roleFeature RoleFeature[]
  userRole    UserRole[]

  @@schema("auth")
}

model Feature {
  id          String  @id @default(uuid())
  label       String  @unique
  name        String
  description String?

  is_deleted Boolean      @default(false)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  deleted_at DateTime?
  created_by String?
  updated_by String?
  deleted_by String?
  // ------- 
  subFeature SubFeature[]

  @@schema("auth")
}

enum FeatureAction {
  CREATE
  READ
  UPDATE
  SOFT_DELETE
  HARD_DELETE
  RESTORE

  @@schema("auth")
}

model SubFeature {
  id          String        @id @default(uuid())
  label       String        @unique
  name        String
  description String?
  is_active   Boolean       @default(true)
  note        String?
  action      FeatureAction

  feature_id String
  feature    Feature @relation(fields: [feature_id], references: [id], onDelete: Cascade)

  is_deleted  Boolean       @default(false)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  deleted_at  DateTime?
  created_by  String?
  updated_by  String?
  deleted_by  String?
  // ------- 
  roleFeature RoleFeature[]

  @@schema("auth")
}

model RoleFeature {
  id String @id @default(uuid())

  role_id    String
  role       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  feature_id String
  feature    SubFeature @relation(fields: [feature_id], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model UserRole {
  id        String  @id @default(uuid())
  is_active Boolean @default(true)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  is_deleted Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  created_by String?
  updated_by String?
  deleted_by String?
  // ------- 

  @@schema("auth")
}
